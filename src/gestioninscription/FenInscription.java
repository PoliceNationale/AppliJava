/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gestioninscription;
import java.awt.event.WindowListener;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import sql.*;

/**
 *
 * @author Valoo22
 */

public class FenInscription extends javax.swing.JFrame 
    {
        /**
         * Creates new form FenInscription
         */
        Connection conn;
        Statement stmt1, stmt2, stmt3;
        int id_client;
    
    public FenInscription()
        {
            initComponents();
            btninscription.setVisible(false); // On rend le bouton inscription non visible
            //jTable1.selectAll();
            //jTable1.setDefaultRenderer(Object.class, new Couleur()); // Pour mettre les sessions déficitaires en rouge
            tInscription.getTableHeader().setReorderingAllowed(false);  //lock colones
            tInscription.getSelectionModel().setSelectionInterval(0, 0);
            lblSelection.setText("Aucune sélection");  
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitre = new javax.swing.JLabel();
        lblMatricule = new javax.swing.JLabel();
        cbxMatricule = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tInscription = new javax.swing.JTable();
        btninscription = new javax.swing.JButton();
        lblSelection = new javax.swing.JLabel();
        btnRetour = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion des incriptions");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblTitre.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        lblTitre.setText("Gestion des Inscriptions");
        lblTitre.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblTitre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblTitre.setDoubleBuffered(true);

        lblMatricule.setText("Nom Prenom Client  :");

        cbxMatricule.setName("cmbMat"); // NOI18N
        cbxMatricule.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMatriculeItemStateChanged(evt);
            }
        });

        jLabel3.setText(" ");
        jLabel3.setName("lblNomPren"); // NOI18N

        tInscription.setModel(new ModeleJTableListeSession());
        tInscription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tInscriptionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tInscription);

        btninscription.setText("Inscription");
        btninscription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninscriptionActionPerformed(evt);
            }
        });

        lblSelection.setText("Sélection : ");

        btnRetour.setText("Retour");
        btnRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btninscription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lblMatricule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxMatricule, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(472, 472, 472))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRetour, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitre)
                .addGap(231, 231, 231))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitre)
                    .addComponent(btnRetour))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxMatricule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMatricule, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btninscription, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try
            {
                // On prévoit 2 connexions à la base
                stmt1 = GestionBdd.connexionBdd(GestionBdd.TYPE_MYSQL, "formarmor","localhost", "root","");
                stmt2 = GestionBdd.connexionBdd(GestionBdd.TYPE_MYSQL, "formarmor","localhost", "root","");
                // Liste des clients qui ont un plan de formation"
                String req = "select distinct c.nom from client c, plan_formation p where c.id = p.client_id order by c.nom";
                ResultSet rs = GestionBdd.envoiRequeteLMD(stmt1,req);
                cbxMatricule.addItem("Tous");
                while (rs.next())
                {
                    cbxMatricule.addItem(rs.getString("nom"));
                }
            }
        catch (SQLException se)
            {
                System.out.println("Erreur SQL1 : " + se.getMessage());
            }
    }//GEN-LAST:event_formWindowOpened


    private void cbxMatriculeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMatriculeItemStateChanged
        // Affichage du nom prénom et de la liste des sessions autorisées
        if (evt.getStateChange() != 1) // Pour éviter le déclenchement sur la création de la fenêtre
            {
                stmt3= GestionBdd.connexionBdd(GestionBdd.TYPE_MYSQL, "formarmor","localhost", "root","");
                String req1;
                req1="Select id from client where nom ='"+ cbxMatricule.getSelectedItem().toString()+"'";
                ResultSet rs4 = GestionBdd.envoiRequeteLMD(stmt3, req1);
            try 
            {
                rs4.first();
                id_client=rs4.getInt("id");
                rs4.close();
                stmt3.close();
            } 
            catch (SQLException ex) 
            {
                System.out.println("ErreurSql : "+ex.getMessage());
            }
                renseigne();
            }
    }//GEN-LAST:event_cbxMatriculeItemStateChanged

    private void btninscriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninscriptionActionPerformed
        FenConfirmationInscription f2 = new FenConfirmationInscription(this, true);
        f2.init(id_client, tInscription.getValueAt(tInscription.getSelectedRow(),0));
        f2.setSize(400,300);
        f2.setVisible(true);
    }//GEN-LAST:event_btninscriptionActionPerformed

    private void tInscriptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tInscriptionMouseClicked
        if (cbxMatricule.getSelectedIndex()>0 && tInscription.getValueAt(tInscription.getSelectedRow(), 0) != null)
            {
                lblSelection.setText(tInscription.getValueAt(tInscription.getSelectedRow(), 0).toString());
                int pos1 = jLabel3.getText().indexOf(":");
                String nomPrenom = jLabel3.getText().substring(pos1 + 1);
                btninscription.setText("Inscription à la session numéro " + tInscription.getValueAt(tInscription.getSelectedRow(), 0) + " pour " + cbxMatricule.getSelectedItem().toString());
                btninscription.setVisible(true);
            }
        else
            {
                btninscription.setVisible(false);
                lblSelection.setText("Aucune sélection");
            }
    }//GEN-LAST:event_tInscriptionMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        renseigne();
    }//GEN-LAST:event_formWindowActivated

    private void btnRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetourActionPerformed
        FMenuPrincipal f1 = new FMenuPrincipal();
        this.setVisible(false);
        f1.setVisible(true);
    }//GEN-LAST:event_btnRetourActionPerformed
    @Override
    public synchronized void addWindowListener(WindowListener l) 
        {
            super.addWindowListener(l); //To change body of generated methods, choose Tools | Templates.
        }
    private void renseigne()
        {
            try
                {
                    // On vide le JTable
                    int j, k;
                    String req;
                    for(int i=0;i<tInscription.getRowCount();i++)
                        {
                            for (j=0;j<tInscription.getColumnCount();j++)
                                {
                                    tInscription.setValueAt(null,i,j);
                                }
                        }
                    if (cbxMatricule.getSelectedIndex()==0||cbxMatricule.getSelectedIndex()==-1) // Pas de client de choisi
                        {
                            jLabel3.setText("ENSEMBLE DES SESSIONS");
                            // Toutes les sessions
                            req = "SELECT * FROM viewdetailsession v WHERE v.date_debut > CURRENT_DATE";
                            // et date supérieure à la date du jour
                            btninscription.setVisible(false); // On rend le bouton inscription non visible
                        }
                    else
                        {
                            // Sélection des sessions "autorisées"
                            req = "call sessions_autorisees('" + id_client + "')";
                            //Si la cellule sélectionnée est vide
                            if (tInscription.getValueAt(tInscription.getSelectedRow(), 0) != null) 
                                {
                                    // On rend le bouton inscription non visible
                                    btninscription.setVisible(false);
                                }
                        }
                    stmt1 = GestionBdd.connexionBdd(GestionBdd.TYPE_MYSQL, "formarmor","localhost", "root","");
                    ResultSet rs2 = GestionBdd.envoiRequeteLMD(stmt1, req);
                    ResultSet rs3 = null;
                    k = 0;
                    try
                        {
                            while(rs2.next())
                                {
                                    if (k==0 && cbxMatricule.getSelectedIndex()!=-1)
                                        {
                                            jLabel3.setText("Sessions autorisées pour : " + id_client);
                                        }
                                    // On calcule la marge et on renseigne la dernière colonne(7ème) du jTable
                                    req = "Select sum(taux_horaire) as revenu_session from statut st, session_formation s, client c, inscription i where s.id = i.session_formation_id and c.id = i.client_id and c.statut_id = st.id and s.id = " + rs2.getInt(1);
                                    stmt2 = GestionBdd.connexionBdd(GestionBdd.TYPE_MYSQL, "formarmor","localhost", "root","");
                                    rs3 = GestionBdd.envoiRequeteLMD(stmt2, req);
                                    rs3.first();
                                    tInscription.setValueAt((rs3.getFloat(1) - rs2.getFloat(13)), k, 7);
                                    // On renseigne le reste du jTable
                                    tInscription.setValueAt(rs2.getInt(1), k, 0);
                                    tInscription.setValueAt(rs2.getString(7), k, 1);
                                    tInscription.setValueAt(rs2.getString(8), k, 2);
                                    tInscription.setValueAt(rs2.getObject(3), k, 3);
                                    tInscription.setValueAt(rs2.getInt(12), k, 4);
                                    tInscription.setValueAt(rs2.getInt(4), k, 5);
                                    tInscription.setValueAt(rs2.getInt(5), k, 6);
                                    k++;
                                }
                            rs2.close();
                        }
                    catch (SQLException sqle)
                        {
                            System.out.print("Erreur SQL : " + sqle.getMessage());
                        }
                }
            catch(NullPointerException npe)
                {
                    System.out.println("Erreur : " + npe.getMessage());
                }
        }
    
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRetour;
    private javax.swing.JButton btninscription;
    private javax.swing.JComboBox cbxMatricule;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMatricule;
    private javax.swing.JLabel lblSelection;
    private javax.swing.JLabel lblTitre;
    private javax.swing.JTable tInscription;
    // End of variables declaration//GEN-END:variables
}
